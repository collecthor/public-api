openapi: 3.0.0
info:
  title: DirectReport
  version: 2 (draft)
  contact:
    name: Directresearch BV
    email: info@directresearch.nl
    url: 'https://directresearch.nl'
  description: Public API for the Report Platform
servers:
  - url: 'http://localhost:3100'
    description: Stoplight Studio
paths:
  /api/export:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Export'
              examples: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '':
          headers:
            header-0:
              schema:
                type: string
      parameters:
        - schema:
            type: string
          in: query
          name: survey
          required: true
          description: User must have access to the survey identified by this ID
        - schema:
            type: string
          in: query
          name: selection
          description: 'Selection ID to apply, assumed to be unique across surveys'
      operationId: GetExports
      description: Fetch availbale exports in JSON
    parameters: []
  /api/data/:
    get:
      parameters:
        - description: 'Variable ID to fetch data for, assumed to be unique across surveys'
          in: query
          required: true
          schema:
            type: string
          name: survey
        - description: 'Selection ID to apply, assumed to be unique across surveys'
          name: selection
          in: query
          required: false
          schema:
            type: string
            minimum: 1
      responses:
        '200':
          description: Variable data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      description: Fetch availbale data in JSON
      operationId: getPData
      tags: []
    parameters: []
  /api/report:
    get:
      parameters:
        - description: User must have access to the survey identified by this ID
          name: survey
          in: query
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        '200':
          description: Dashboard data and block structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      description: Retrieve all data from a survey as JSON
      operationId: getSurveyData
      tags: []
      summary: Get response data
  /api/crossing:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: Crossings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crossing'
              examples:
                example-1:
                  value:
                    crossings:
                      rows:
                        - color: blue
                          shape: circle
                        - color: red
                          shape: triangle
                      settings: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      parameters:
        - schema:
            type: string
          in: query
          name: survey
          description: User must have access to the survey identified by this ID
          required: true
      description: Fetch availbale crossings in JSON
      operationId: GetCrossings
components:
  schemas:
    ExportDef:
      title: ExportDef
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        type:
          type: string
          enum:
            - csv
            - pdf
    Export:
      title: Export
      type: object
      properties:
        exports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ExportDef'
      required:
        - exports
    Report:
      description: Object holding dashboard statistics and report blocks
      type: object
      properties:
        blocks:
          $ref: '#/components/schemas/Blocks'
        selections:
          description: List of selections that can be used when requesting variables using `data` endpoint
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        survey:
          type: object
          properties:
            name:
              type: string
            client:
              type: string
        theme:
          type: object
          properties:
            colors:
              type: object
              properties:
                main-color:
                  type: string
                header-active-color:
                  type: string
                header-text-color:
                  type: string
            logo:
              type: string
        stats:
          $ref: '#/components/schemas/Stats'
    Blocks:
      type: array
      x-examples:
        ranking:
          hash: r1
          name: Ranking
          text: Welke aspecten vind je van toepassing?
          type: ranking_block
          data:
            - /api/data/statement?id=123
            - /api/data/statement?id=234
            - /api/data/statement?id=345
          theme:
            colors:
              list:
                - '#fff'
                - '#ccc'
                - '#000'
        compound:
          hash: m1
          name: Matrix poly
          text: Welke aspecten vind je van toepassing?
          type: compound_block
          data:
            - /api/data/statement?id=123
            - /api/data/statement?id=234
            - /api/data/statement?id=345
          theme:
            colors:
              list:
                - '#fff'
                - '#ccc'
                - '#000'
        simple:
          hash: b
          name: Simple
          text: Wat doet het weer?
          type: simple_block
          data: /api/data/question?q=1
          theme:
            colors:
              list:
                - '#fff'
                - '#ccc'
                - '#000'
      description: ''
      title: ''
      items:
        type: object
        properties:
          hash:
            description: 'Block name, can be used as the title'
            type: string
          name:
            description: 'Block text, can be used for question text'
            type: string
          text:
            type: string
            description: Single value enum implementing a const name for this block type (OpenAPI 3.1 provides the const type syntactic sugar)
          type:
            type: string
            description: 'String: Link to the variable data, add optional non-zero selection parameter when making the request'
            enum:
              - simple_block
              - compound_block
              - ranking_block
          data:
            type:
              - string
              - array
            items: {}
          theme:
            type: object
            properties:
              colors:
                type: object
                properties:
                  list:
                    type: array
                    items: {}
    Data:
      description: Object holding all report data for the current request
      type: object
      properties:
        measurement_level:
          type: string
          enum:
            - nominal
            - scale
            - ordinal
        multiple_response:
          type: boolean
        data_type:
          type: string
          enum:
            - text
            - number
            - fraction
            - nps
            - rank
        total:
          type: integer
        label:
          type: string
        categories:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DataDef'
      required:
        - measurement_level
        - multiple_response
        - data_type
        - total
        - label
        - categories
    DataDef:
      title: DataDef
      type: object
      properties:
        label:
          type: string
        value:
          type: integer
        count:
          type: integer
        order:
          type: integer
        data:
          type: string
          format: uri
      required:
        - label
        - value
        - count
        - order
    Crossing:
      title: Crossing
      type: object
      properties:
        crossings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ExportDef'
          properties:
            rows:
              type: array
              items: {}
            settings:
              type: object
      x-examples:
        example-1:
          crossings:
            rows:
              - color: blue
                shape: circle
              - color: red
                shape: triangle
            settings: {}
    Stats:
      title: Stats
      type: array
      x-examples:
        Without charts:
          label: Invultijd gem.
          text: '06:40'
        With charts:
          label: Afgerond
          count: 2850
          chart:
            label: Afhakers
            data:
              - label: '1'
                count: 478
              - label: '2'
                count: 200
              - label: '3'
                count: 50
              - label: '4'
                count: 60
              - label: '5'
                count: 50
              - label: '6'
                count: 0
              - label: '7'
                count: 0
              - label: '8'
                count: 0
              - label: '9'
                count: 0
              - label: '10'
                count: 0
              - label: '11'
                count: 0
              - label: '12'
                count: 0
              - label: '13'
                count: 0
              - label: '14'
                count: 4
              - label: '15'
                count: 12
      items:
        anyOf:
          - properties:
              label:
                type: string
              type:
                type: string
          - properties:
              label:
                type: string
              type:
                type: string
              chart:
                type: object
                properties:
                  label:
                    type: string
                  data:
                    type: array
                    items:
                      anyOf:
                        - properties:
                            label:
                              type: string
                            count:
                              type: number
                      type: object
                  data_type:
                    type: string
                    enum:
                      - numeric
                      - date
        type: object
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
    apiKey:
      name: X-API-Key
      type: apiKey
      in: header
security:
  - BearerAuth: []
  - apiKey: []
